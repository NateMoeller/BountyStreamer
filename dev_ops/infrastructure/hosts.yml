#Prequisits. Create each of the following using AWS console before running this template:
#1) Route 53 domain. You must update your DNS provider to use the nameservers associated with this HostedZone. Do this for main Domain and any redirects as well.
#2) hosted zone created with route 53 domain name
#3) arn certificate
#4) Ec2 KeyPair
AWSTemplateFormatVersion: 2010-09-09
Description: VPC and Ec2 Instances for StreamerContracts App
Parameters:
  KeyPairName:
    Type: String
    Description: Used to ssh securly onto Ec2 Instance
    Default: beta-bountystreamer
    AllowedValues:
      - beta-bountystreamer
      - prod-bountystreamer
  StreamerContractsEc2InstanceTags:
    Type: String
    Description: The EC2 tags that are already applied to EC2 instances that you want to include in the deployment group.
    Default: StreamerContracts
  StreamerContractsWebDomain:
    Type: String
    Description: The DomainName that StreamerContracts runs on.
    Default: beta.bountystreamer.gg
    AllowedValues:
      - beta.bountystreamer.gg
      - bountystreamer.gg
  StreamerContractsRedirectWebDomain:
    Type: String
    Description: Domain name that should redirect to the main web domain
    Default: beta.bountystreamer.com
    AllowedValues:
      - beta.bountystreamer.com
      - bountystreamer.com
  WebsiteHostedZoneId:
    Type: String
    Description: Get this value from AWS console.
    Default: Z2O9ZYET0DSOU5
  RedirectHostedZoneId:
    Type: String
    Description: Get this value from AWS console.
    Default: Z2IP5XEDI5GXDA
  StreamerContractsCertificateArn:
    Type: String
    Description: The CertificateArn used for SSL. Get this value from AWS console.
    Default: arn:aws:acm:us-east-1:188521609698:certificate/ce942943-1059-4570-88f2-cbca974c19df
  Environment:
    Type: String
    Description: The Environment to create hosts in. Allowed values = Beta, Prod
    Default: Beta
    AllowedValues:
      - Beta
      - Prod

Resources:
  StreamerContractsVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default

  StreamerContractsOpenToAllSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: SecurityGroup for EC2 Hosts
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound communication from any port to any port
          FromPort: -1
          IpProtocol: -1
          ToPort: -1
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all inbound communication from any port to any port
          FromPort: -1
          IpProtocol: -1
          ToPort: -1
      VpcId: !Ref StreamerContractsVPC

  StreamerContractsSSHAccessSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: SecurityGroup for EC2 Hosts
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound communication from any port to any port
          FromPort: -1
          IpProtocol: -1
          ToPort: -1
      # Only allow inbound traffic from trusted Cidr ranges. For example, the dev team's IPs should go here. Leaving this open to all (0.0.0.0/0) while still in development. Additionally, this is not the AWS recommended way to handle security and does have flaws. The ideal implementation is to create a Bastion host in a public Subnet and then have everything that should be in the private subnet go there.
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          Description: Allow ssh traffic from anywhere in the world
          FromPort: 22
          IpProtocol: tcp
          ToPort: 22
      VpcId: !Ref StreamerContractsVPC

  StreamerContractsPublicSubnet1a:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: us-east-1a
      CidrBlock: 10.0.3.0/24
      MapPublicIpOnLaunch: true
      VpcId: !Ref StreamerContractsVPC

  StreamerContractsPublicSubnet1b:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: us-east-1b
      CidrBlock: 10.0.4.0/24
      MapPublicIpOnLaunch: true
      VpcId: !Ref StreamerContractsVPC

  StreamerContractsInternetGateway:
    Type: AWS::EC2::InternetGateway

  StreamerContractsVpcGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref StreamerContractsInternetGateway
      VpcId: !Ref StreamerContractsVPC

  StreamerContractsRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref StreamerContractsVPC

  StreamerContractsRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref StreamerContractsInternetGateway
      RouteTableId: !Ref StreamerContractsRouteTable

  StreamerContractsSubnetRouteTableAssociation1a:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref StreamerContractsRouteTable
      SubnetId: !Ref StreamerContractsPublicSubnet1a

  StreamerContractsSubnetRouteTableAssociation1b:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref StreamerContractsRouteTable
      SubnetId: !Ref StreamerContractsPublicSubnet1b

  StreamerContractsRedirectWebBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Delete
    Properties:
      AccessControl: Private
      WebsiteConfiguration:
        RedirectAllRequestsTo:
          HostName: !Ref StreamerContractsWebDomain
          Protocol: https
      BucketName: !Ref StreamerContractsRedirectWebDomain

  Ec2InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
            Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole

  StreamerContractsIAMPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
        - Action:
          - s3:Get*
          - s3:List*
          Resource:
            - !Sub arn:aws:s3:::aws-codedeploy-${AWS::Region}/*
            - "*"
          Effect: Allow
        - Action:
          - logs:CreateLogGroup
          - logs:CreateLogStream
          - logs:DescribeLogStreams
          - logs:PutLogEvents
          Resource:
            - arn:aws:logs:*:*:*
          Effect: Allow
        - Action:
          - autoscaling:Describe*
          - cloudformation:Describe*
          - cloudformation:Get*
          - cloudformation:List*
          Resource:
            - "*"
          Effect: Allow
        - Action:
          - sqs:*
          Resource:
            - !GetAtt ExpiredDonationsSQS.Arn
          Effect: Allow
      PolicyName: StreamerContractsEc2InstanceProfileRole
      Roles:
        - !Ref Ec2InstanceRole

  Ec2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref Ec2InstanceRole

  StreamerContractsLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      SecurityGroups:
        - !Ref StreamerContractsOpenToAllSecurityGroup
      Subnets:
        - !Ref StreamerContractsPublicSubnet1a
        - !Ref StreamerContractsPublicSubnet1b
      Type: application
      IpAddressType: ipv4

  StreamerContractsLoadBalancerTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 8070
      Protocol: HTTPS
      VpcId: !Ref StreamerContractsVPC

  StreamerContractsLoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      Certificates:
        - CertificateArn: !Ref StreamerContractsCertificateArn
      DefaultActions:
        - TargetGroupArn: !Ref StreamerContractsLoadBalancerTargetGroup
          Type: forward
      LoadBalancerArn: !Ref StreamerContractsLoadBalancer
      Port: 443
      Protocol: HTTPS

  StreamerContractsApiLaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      AssociatePublicIpAddress: true
      IamInstanceProfile: !Ref Ec2InstanceProfile
      ImageId: ami-467ca739
      InstanceMonitoring: false
      InstanceType: t2.micro
      KeyName: !Ref KeyPairName
      SecurityGroups:
        - !Ref StreamerContractsOpenToAllSecurityGroup
      # Logs created while running these commands are saved at /var/log/cloud-init-output.log on ec2 hosts
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          yum -y update
          yum install -y ruby
          cd /home/ec2-user
          curl -O https://aws-codedeploy-us-east-1.s3.amazonaws.com/latest/install
          chmod +x ./install
          ./install auto
          sudo yum -y remove java-1.7.0-openjdk
          sudo yum -y install java-1.8.0
          sudo yum -y install awslogs

  StreamerContractsApiAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      DesiredCapacity: 1
      LaunchConfigurationName: !Ref StreamerContractsApiLaunchConfiguration
      TargetGroupARNs:
        - !Ref StreamerContractsLoadBalancerTargetGroup
      MaxSize: 5
      MinSize: 1
      Tags:
        - Key: Name
          Value: !Sub ${Environment}-${StreamerContractsEc2InstanceTags}-Api
          PropagateAtLaunch: true
      VPCZoneIdentifier:
        - !Ref StreamerContractsPublicSubnet1a
        - !Ref StreamerContractsPublicSubnet1b

  StreamerContractsWebRecordSet:
    Type: AWS::Route53::RecordSet
    Properties:
      AliasTarget:
          DNSName: !GetAtt StreamerContractsCloudFrontDistribution.DomainName
          # obtained from here: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-route53-aliastarget.html#cfn-route53-aliastarget-hostedzoneid
          HostedZoneId: Z2FDTNDATAQYW2
      HostedZoneId: !Ref WebsiteHostedZoneId
      Name: !Ref StreamerContractsWebDomain
      Type: A

  StreamerContractsWebRedirectRecordSet:
    Type: AWS::Route53::RecordSet
    Properties:
      AliasTarget:
          DNSName: !GetAtt StreamerContractsRedirectCloudFrontDistribution.DomainName
          # obtained from here: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-route53-aliastarget.html#cfn-route53-aliastarget-hostedzoneid
          HostedZoneId: Z2FDTNDATAQYW2
      HostedZoneId: !Ref RedirectHostedZoneId
      Name: !Ref StreamerContractsRedirectWebDomain
      Type: A

  StreamerContractsApiRecordSet:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref WebsiteHostedZoneId
      Name: !Sub api.${StreamerContractsWebDomain}
      ResourceRecords:
        - !GetAtt StreamerContractsLoadBalancer.DNSName
      TTL: 300
      Type: CNAME

  StreamerContractsDBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: DB Subnet for StreamerContracts
      # DBSubnetGroupName is stored as lower case string
      DBSubnetGroupName: !Sub ${Environment}-streamercontractsdbsubnetgroup
      SubnetIds:
        - !Ref StreamerContractsPublicSubnet1a
        - !Ref StreamerContractsPublicSubnet1b

  StreamerContractsDBInstance:
    Type: AWS::RDS::DBInstance
    DependsOn: StreamerContractsDBSubnetGroup
    Properties:
      AllocatedStorage: 100
      DBInstanceClass: db.t2.micro
      DBName: StreamerContractsDB
      DBSubnetGroupName: !Sub ${Environment}-streamercontractsdbsubnetgroup
      PubliclyAccessible: true
      Engine: postgres
      EngineVersion: 9.6
      MasterUsername: StreamerContractsAdmin
      MasterUserPassword: ChangeMe
      Port: 5432
      VPCSecurityGroups:
        - !Ref StreamerContractsOpenToAllSecurityGroup

  StreamerContractsCloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Aliases:
          - !Ref StreamerContractsWebDomain
        CustomErrorResponses:
          - ErrorCode: 404
            ResponseCode: 200
            ResponsePagePath: /index.html
        DefaultCacheBehavior:
          Compress: true
          ForwardedValues:
            QueryString: false
          TargetOriginId: !Sub S3-Website-${StreamerContractsWebDomain}.s3.amazonaws.com
          ViewerProtocolPolicy: redirect-to-https
        DefaultRootObject: index.html
        Enabled: true
        IPV6Enabled: true
        Origins:
          - S3OriginConfig:
              # Name must match S3 ID specifications: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cloudfront-distribution-s3originconfig.html
              OriginAccessIdentity: !Sub origin-access-identity/cloudfront/${StreamerContractsCloudFrontOriginAccessIdentity}
            DomainName: !Sub ${StreamerContractsWebDomain}.s3.amazonaws.com
            Id: !Sub S3-Website-${StreamerContractsWebDomain}.s3.amazonaws.com
        PriceClass: PriceClass_All
        ViewerCertificate:
          AcmCertificateArn: !Ref StreamerContractsCertificateArn
          SslSupportMethod: sni-only

  StreamerContractsRedirectCloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Aliases:
          - !Ref StreamerContractsRedirectWebDomain
        DefaultCacheBehavior:
          Compress: true
          ForwardedValues:
            QueryString: false
          TargetOriginId: !Sub ${StreamerContractsRedirectWebDomain}.s3-website-us-east-1.amazonaws.com #can this be S3Bucket.websiteUrl ? -> Other working origin: ${StreamerContractsRedirectWebDomain}.s3-website-us-east-1.amazonaws.com
          ViewerProtocolPolicy: allow-all
        Enabled: true
        IPV6Enabled: true
        Origins:
          - CustomOriginConfig:
              OriginProtocolPolicy: http-only
              HTTPPort: 80
              HTTPSPort: 443
            DomainName: !Sub ${StreamerContractsRedirectWebDomain}.s3-website-us-east-1.amazonaws.com
            Id: !Sub ${StreamerContractsRedirectWebDomain}.s3-website-us-east-1.amazonaws.com
        PriceClass: PriceClass_All
        ViewerCertificate:
          AcmCertificateArn: !Ref StreamerContractsCertificateArn
          SslSupportMethod: sni-only

  StreamerContractsCloudFrontOriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: Currently dont use this to restrict access to the S3 bucket but it is needed for cloudformation scripts to run. Weird.

  StreamerContractsElastiCacheSubnetGroup:
    Type: AWS::ElastiCache::SubnetGroup
    Properties:
      Description: ElastiCache Subnet Group for Streamer Contracts
      SubnetIds:
        - !Ref StreamerContractsPublicSubnet1a
        - !Ref StreamerContractsPublicSubnet1b

  StreamerContractsElastiCacheCluster:
    Type: AWS::ElastiCache::CacheCluster
    Properties:
      Engine: redis
      CacheNodeType: cache.t2.micro
      CacheSubnetGroupName: !Ref StreamerContractsElastiCacheSubnetGroup
      NumCacheNodes: 1
      Port: 6379
      VpcSecurityGroupIds:
        - !Ref StreamerContractsOpenToAllSecurityGroup

  ExpiredDonationEvent:
    Type: AWS::Events::Rule
    Properties:
      ScheduleExpression: rate(30 minutes)
      State: ENABLED
      Targets:
        - Arn: !GetAtt ExpiredDonationsSQS.Arn
          Id: ExpiredDonationsSQS

  ExpiredDonationsSQS:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub ExpiredDonationsSQS-${Environment}