AWSTemplateFormatVersion: 2010-09-09
Description: VPC and Ec2 Instances for StreamerContracts App
Parameters:
  KeyPairName:
    Type: String
    Description: Used to ssh securly onto Ec2 Instance
    Default: streamer-contracts
  StreamerContractsEc2InstanceTags:
    Type: String
    Description: The EC2 tags that are already applied to EC2 instances that you want to include in the deployment group.
    Default: StreamerContracts
  StreamerContractsWebDomain:
    Type: String
    Description: The DomainName that StreamerContracts runs on.
    Default: streamercontracts.co.uk

Resources:
  StreamerContractsVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default

  StreamerContractsSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: StreamerContractsSecurityGroup
      GroupDescription: SecurityGroup for EC2 Hosts
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound communication from any port to any port
          FromPort: -1
          IpProtocol: -1
          ToPort: -1
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all inbound communication from any port to any port
          FromPort: -1
          IpProtocol: -1
          ToPort: -1
      VpcId: !Ref StreamerContractsVPC

  StreamerContractsSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: us-east-1e
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      VpcId: !Ref StreamerContractsVPC

  StreamerContractsSubnetTwo:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: us-east-1a
      CidrBlock: 10.0.2.0/24
      MapPublicIpOnLaunch: true
      VpcId: !Ref StreamerContractsVPC

  StreamerContractsInternetGateway:
    Type: AWS::EC2::InternetGateway

  StreamerContractsVpcGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref StreamerContractsInternetGateway
      VpcId: !Ref StreamerContractsVPC

  StreamerContractsRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref StreamerContractsVPC

  StreamerContractsRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref StreamerContractsInternetGateway
      RouteTableId: !Ref StreamerContractsRouteTable

  StreamerContractsSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref StreamerContractsRouteTable
      SubnetId: !Ref StreamerContractsSubnet

  Ec2InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
            Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      RoleName: StreamerContractsEc2InstanceProfileRole
      Policies:
        - PolicyName: StreamerContractsEc2InstanceProfileRole
          PolicyDocument:
            Version: 2012-10-17
            Statement:
            - Action:
              - s3:Get*
              - s3:List*
              Resource:
                - !Sub arn:aws:s3:::aws-codedeploy-${AWS::Region}/*
                - "*"
              Effect: Allow

  Ec2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref Ec2InstanceRole
      InstanceProfileName: StreamerContractsEc2InstanceProfile

  StreamerContractsApiEc2Instance:
    Type: AWS::EC2::Instance
    Properties:
      IamInstanceProfile: !Ref Ec2InstanceProfile
      ImageId: ami-467ca739
      InstanceType: t2.micro
      KeyName: !Ref KeyPairName
      SecurityGroupIds:
        - !Ref StreamerContractsSecurityGroup
      SourceDestCheck: True
      SubnetId: !Ref StreamerContractsSubnet
      Tags:
        - Key: Name
          Value: !Sub ${StreamerContractsEc2InstanceTags}-Api
      Tenancy: default
      # Logs created while running these commands are saved at /var/log/cloud-init-output.log on ec2 hosts
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          yum -y update
          yum install -y ruby
          cd /home/ec2-user
          curl -O https://aws-codedeploy-us-east-1.s3.amazonaws.com/latest/install
          chmod +x ./install
          ./install auto
          sudo yum -y remove java-1.7.0-openjdk
          sudo yum -y install java-1.8.0

  StreamerContractsWebServerEc2Instance:
    Type: AWS::EC2::Instance
    Properties:
      IamInstanceProfile: !Ref Ec2InstanceProfile
      ImageId: ami-467ca739
      InstanceType: t2.micro
      KeyName: !Ref KeyPairName
      SecurityGroupIds:
        - !Ref StreamerContractsSecurityGroup
      SourceDestCheck: True
      SubnetId: !Ref StreamerContractsSubnet
      Tags:
        - Key: Name
          Value: !Sub ${StreamerContractsEc2InstanceTags}-WebServer
      Tenancy: default
      # Logs created while running these commands are saved at /var/log/cloud-init-output.log on ec2 hosts
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          yum -y update
          yum install -y ruby
          cd /home/ec2-user
          curl -O https://aws-codedeploy-us-east-1.s3.amazonaws.com/latest/install
          chmod +x ./install
          ./install auto
          sudo yum -y remove java-1.7.0-openjdk
          sudo yum -y remove java-1.7.0-openjdk
          sudo yum -y install java-1.8.0
          sudo wget http://nginx.org/keys/nginx_signing.key
          sudo yum -y install nginx

  # You must update your DNS provider to use the nameservers associated with this HostedZone
  StreamerContractsRoute53:
    Type: AWS::Route53::HostedZone
    Properties:
      HostedZoneConfig:
        Comment: HostedZone for StreamerContracts
      Name: !Ref StreamerContractsWebDomain

  StreamerContractsWebServerRecordSet:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref StreamerContractsRoute53
      Name: !Ref StreamerContractsWebDomain
      ResourceRecords:
        - !GetAtt StreamerContractsWebServerEc2Instance.PublicIp
      TTL: 300
      Type: A

  StreamerContractsApiRecordSet:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref StreamerContractsRoute53
      Name: !Sub api.${StreamerContractsWebDomain}
      ResourceRecords:
        - !GetAtt StreamerContractsApiEc2Instance.PublicIp
      TTL: 300
      Type: A

  StreamerContractsDBClusterParameterGroup:
    Type: AWS::RDS::DBClusterParameterGroup
    Properties:
      Description: DB Cluster for StreamerContracts
      Family: aurora-postgresql9.6
      Parameters:
        client_encoding: UTF-8

  StreamerContractsDBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: DB Subnet for StreamerContracts
      # DBSubnetGroupName is stored as lower case string
      DBSubnetGroupName: streamercontractsdbsubnetgroup
      SubnetIds:
        - !Ref StreamerContractsSubnet
        - !Ref StreamerContractsSubnetTwo

  StreamerContractsDBCluster:
    Type: AWS::RDS::DBCluster
    #Since we cant Ref for StreamerContractsDBSubnetGroup.DBSubnetGroupName, we need this DependsOn clause
    DependsOn: StreamerContractsDBSubnetGroup
    Properties:
      DatabaseName: StreamerContractsDB
      DBClusterIdentifier: streamer-contracts-db
      DBClusterParameterGroupName: !Ref StreamerContractsDBClusterParameterGroup
      # needs to match StreamerContractsDBSubnetGroup.DBSubnetGroupName
      DBSubnetGroupName: streamercontractsdbsubnetgroup
      Engine: aurora-postgresql
      EngineVersion: 9.6
      MasterUsername: StreamerContractsAdmin
      MasterUserPassword: ChangeMe
      Port: 5432
      VpcSecurityGroupIds:
        - !Ref StreamerContractsSecurityGroup

  StreamerContractsDBInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      DBClusterIdentifier: !Ref StreamerContractsDBCluster
      DBInstanceClass: db.r4.large
      Engine: aurora-postgresql
      PubliclyAccessible: true